1、

package cn.mldn.demo;
public class JavaAPIDemo {
	public static void main(String[] args) throws Exception {
		Message msg = new Message() ;	// 实例化消息主体对象
		msg.setInfo("www.mldn.cn"); // 设置要发送的内容
		Channel.setMessage(msg); // 设置要发送的消息
		Channel.send(); // 发送消息
	}
}

class Channel {	// 消息的发送通道
	private static Message message ;
	private Channel() {}
	public static void setMessage(Message m) {
		message = m ;
	}
	public static void send() {	// 发送消息
		System.out.println("【消息发送】" + message.getInfo());
	} 
}
class Message {	// 要发送的消息体
	private String info ;
	public void setInfo(String info) {
		this.info = info;
	}
	public String getInfo() {
		return info;
	}
}


2、
package cn.mldn.demo;
public class JavaAPIDemo {
	public static void main(String[] args) throws Exception {
		new Thread(()->{
			Message msg = new Message() ;	// 实例化消息主体对象
			msg.setInfo("第一个线程的消息"); // 设置要发送的内容
			Channel.setMessage(msg); // 设置要发送的消息
			Channel.send(); // 发送消息
		},"消息发送者A") .start() ;
		new Thread(()->{
			Message msg = new Message() ;	// 实例化消息主体对象
			msg.setInfo("第二个线程的消息"); // 设置要发送的内容
			Channel.setMessage(msg); // 设置要发送的消息
			Channel.send(); // 发送消息
		},"消息发送者B") .start() ;
		new Thread(()->{
			Message msg = new Message() ;	// 实例化消息主体对象
			msg.setInfo("第三个线程的消息"); // 设置要发送的内容
			Channel.setMessage(msg); // 设置要发送的消息
			Channel.send(); // 发送消息
		},"消息发送者C") .start() ;
	}
}

class Channel {	// 消息的发送通道
	private static Message message ;
	private Channel() {}
	public static void setMessage(Message m) {
		message = m ;
	}
	public static void send() {	// 发送消息
		System.out.println("【" + Thread.currentThread().getName() + "、消息发送】" + message.getInfo());
	} 
}
class Message {	// 要发送的消息体
	private String info ;
	public void setInfo(String info) {
		this.info = info;
	}
	public String getInfo() {
		return info;
	}
}


3、
package cn.mldn.demo;
public class JavaAPIDemo {
	public static void main(String[] args) throws Exception {
		new Thread(()->{
			Message msg = new Message() ;	// 实例化消息主体对象
			msg.setInfo("第一个线程的消息"); // 设置要发送的内容
			Channel.setMessage(msg); // 设置要发送的消息
			Channel.send(); // 发送消息
		},"消息发送者A") .start() ;
		new Thread(()->{
			Message msg = new Message() ;	// 实例化消息主体对象
			msg.setInfo("第二个线程的消息"); // 设置要发送的内容
			Channel.setMessage(msg); // 设置要发送的消息
			Channel.send(); // 发送消息
		},"消息发送者B") .start() ;
		new Thread(()->{
			Message msg = new Message() ;	// 实例化消息主体对象
			msg.setInfo("第三个线程的消息"); // 设置要发送的内容
			Channel.setMessage(msg); // 设置要发送的消息
			Channel.send(); // 发送消息
		},"消息发送者C") .start() ;
	}
}

class Channel {	// 消息的发送通道
	private static final ThreadLocal<Message> THREADLOCAL = new ThreadLocal<Message>() ;
	private Channel() {}
	public static void setMessage(Message m) {
		THREADLOCAL.set(m);  // 向ThreadLocal中保存数据
	}
	public static void send() {	// 发送消息
		System.out.println("【" + Thread.currentThread().getName() + "、消息发送】" + THREADLOCAL.get().getInfo());
	} 
}
class Message {	// 要发送的消息体
	private String info ;
	public void setInfo(String info) {
		this.info = info;
	}
	public String getInfo() {
		return info;
	}
}
