1、

package cn.mldn.demo;

import java.util.Set;

public class JavaAPIDemo {
	public static void main(String[] args) throws Exception {
		// 进行Set集合数据的保存，并且设置有重复的内容
		Set<String> all = Set.of("Hello", "World", "MLDN", "Hello", "World");
		all.forEach(System.out::println);	// 直接输出
	}

}


2、
package cn.mldn.demo;
import java.util.HashSet;
import java.util.Set;
public class JavaAPIDemo {
	public static void main(String[] args) throws Exception {
		Set<String> all = new HashSet<String>();
		all.add("MLDN");
		all.add("NiHao") ;
		all.add("Hello");
		all.add("Hello"); // 重复元素
		all.add("World");
		all.forEach(System.out::println); // 直接输出
	}
}


3、
package cn.mldn.demo;
import java.util.Set;
import java.util.TreeSet;
public class JavaAPIDemo {
	public static void main(String[] args) throws Exception {
		Set<String> all = new TreeSet<String>();
		all.add("MLDN"); 
		all.add("NiHao") ;
		all.add("Hello");
		all.add("Hello"); // 重复元素
		all.add("World");
		all.forEach(System.out::println); // 直接输出
	}
}


4、

package cn.mldn.demo;

import java.util.Set;
import java.util.TreeSet;
class Person implements Comparable <Person> { // 比较器
	private String name ;
	private int age ;
	public Person(String name,int age) {
		this.name = name ;
		this.age = age ;
	}
	public String toString() {
		return "姓名：" + this.name + "、年龄：" + this.age ;
	}
	@Override
	public int compareTo(Person per) {
		if (this.age < per.age) {
			return -1 ;
		} else if (this.age > per.age) {
			return 1 ;
		} else {
			return this.name.compareTo(per.name) ; 
		}
	}
}

public class JavaAPIDemo {
	public static void main(String[] args) throws Exception {
		Set<Person> all = new TreeSet<Person>(); // 为List父接口进行实例化
		all.add(new Person("张三",19)) ;
		all.add(new Person("李四",19)) ;	// 年龄相同，但是姓名不同
		all.add(new Person("王五",20)) ;	// 数据重复
		all.add(new Person("王五",20)) ;	// 数据重复
		all.add(new Person("小强",78)) ;
		all.forEach(System.out::println); 
	}

}



4、

package cn.mldn.demo;

import java.util.HashSet;
import java.util.Set;
class Person { // 比较器
	private String name ;
	private int age ;
	public Person(String name,int age) {
		this.name = name ;
		this.age = age ;
	}
	
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + age;
		result = prime * result + ((name == null) ? 0 : name.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Person other = (Person) obj;
		if (age != other.age)
			return false;
		if (name == null) {
			if (other.name != null)
				return false;
		} else if (!name.equals(other.name))
			return false;
		return true;
	}

	public String toString() {
		return "姓名：" + this.name + "、年龄：" + this.age ;
	}
}

public class JavaAPIDemo {
	public static void main(String[] args) throws Exception {
		Set<Person> all = new HashSet<Person>(); // 为List父接口进行实例化
		all.add(new Person("张三",19)) ;
		all.add(new Person("李四",19)) ;	// 年龄相同，但是姓名不同
		all.add(new Person("王五",20)) ;	// 数据重复
		all.add(new Person("王五",20)) ;	// 数据重复
		all.add(new Person("小强",78)) ;
		all.forEach(System.out::println); 
	}

}



5、

