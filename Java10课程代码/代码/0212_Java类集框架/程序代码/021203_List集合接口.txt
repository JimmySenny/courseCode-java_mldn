1、package cn.mldn.demo;

import java.util.List;

public class JavaAPIDemo {
	public static void main(String[] args) throws Exception {
		List<String> all = List.of("Hello", "World", "你好", "MLDN", "饿了么？");
		System.out.println(all); 
	}
}

2、

package cn.mldn.demo;

import java.util.ArrayList;
import java.util.List;

public class JavaAPIDemo {
	public static void main(String[] args) throws Exception {
		List<String> all = new ArrayList<String>() ;	// 为List父接口进行实例化
		all.add("Hello") ;
		all.add("Hello") ;	// 重复数据
		all.add("World") ;
		all.add("MLDN") ;
		System.out.println(all);
	}
}

3、

package cn.mldn.demo;

import java.util.ArrayList;
import java.util.List;

public class JavaAPIDemo {
	public static void main(String[] args) throws Exception {
		List<String> all = new ArrayList<String>() ;	// 为List父接口进行实例化
		all.add("Hello") ;
		all.add("Hello") ;	// 重复数据
		all.add("World") ;
		all.add("MLDN") ;
		all.forEach((str)->{
			System.out.print(str + "、");
		});
	}
}

4、

package cn.mldn.demo;

import java.util.ArrayList;
import java.util.List;

public class JavaAPIDemo {
	public static void main(String[] args) throws Exception {
		List<String> all = new ArrayList<String>() ;	// 为List父接口进行实例化
		System.out.println("集合是否为空？" + all.isEmpty() + "、集合元素个数：" + all.size());
		all.add("Hello") ;
		all.add("Hello") ;	// 重复数据
		all.add("World") ;
		all.add("MLDN") ;
		all.remove("Hello") ; // 删除元素
		System.out.println("集合是否为空？" + all.isEmpty() + "、集合元素个数：" + all.size());
		all.forEach((str)->{
			System.out.print(str + "、");
		});
	}
}

5、

package cn.mldn.demo;

import java.util.ArrayList;
import java.util.List;
class Person {
	private String name ;
	private int age ;
	public Person(String name,int age) {
		this.name = name ;
		this.age = age ;
	}
	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true ; 
		}
		if (obj == null) {
			return false ;
		}
		if (!(obj instanceof Person)) {
			return false ;
		}
		Person per = (Person) obj ;
		return this.name.equals(per.name) && this.age == per.age ;
	}
	// setter、getter、构造略
	public String toString() {
		return "姓名：" + this.name + "、年龄：" + this.age ;
	}
}
public class JavaAPIDemo {
	public static void main(String[] args) throws Exception {
		List<Person> all = new ArrayList<Person>();
		all.add(new Person("张三",30)) ;
		all.add(new Person("李四",16)) ;
		all.add(new Person("小强",78)) ;
		System.out.println(all.contains(new Person("小强",78)));
		all.remove(new Person("小强",78)) ;
		all.forEach(System.out::println); 	// 方法引用代替了消费型的接口
	}
}



6、
package cn.mldn.demo;

import java.util.LinkedList;
import java.util.List;

public class JavaAPIDemo {
	public static void main(String[] args) throws Exception {
		List<String> all = new LinkedList<String>(); // 为List父接口进行实例化
		all.add("Hello");
		all.add("Hello"); // 重复数据
		all.add("World");
		all.add("MLDN"); 
		all.forEach(System.out::println);
	}
}


7、


package cn.mldn.demo;

import java.util.List;
import java.util.Vector;
public class JavaAPIDemo {
	public static void main(String[] args) throws Exception {
		List<String> all = new Vector<String>(); // 为List父接口进行实例化
		all.add("Hello");
		all.add("Hello"); // 重复数据
		all.add("World");
		all.add("MLDN"); 
		all.forEach(System.out::println);
	}


}


8、
