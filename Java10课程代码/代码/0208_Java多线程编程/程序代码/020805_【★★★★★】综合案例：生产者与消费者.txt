1、

package cn.mldn.demo;
public class ThreadDemo { 
	public static void main(String[] args) throws Exception {
		Message msg = new Message() ;
		new Thread(new Producer(msg)).start(); 	// 启动生产者线程
		new Thread(new Consumer(msg)).start(); 	// 启动消费者线程
	}
}
class Producer implements Runnable {
	private Message msg ; 
	public Producer(Message msg) {
		this.msg = msg ;
	}
	@Override
	public void run() {
		for (int x = 0 ; x < 100 ; x ++) {
			if (x % 2 == 0) {
				this.msg.setTitle("王健");
				try {
					Thread.sleep(100);
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
				this.msg.setContent("宇宙大帅哥");
			} else {
				this.msg.setTitle("小高");
				try {
					Thread.sleep(100);
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
				this.msg.setContent("猥琐第一人，常态保持。");
			}
		}
	}
}
class Consumer implements Runnable {
	private Message msg ;
	public Consumer(Message msg) {
		this.msg = msg ;
	}
	@Override
	public void run() {
		for (int x = 0 ; x < 100 ; x ++) {
			try {
				Thread.sleep(10);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			System.out.println(this.msg.getTitle() + "  -  " + this.msg.getContent());
		}
	}
	
}
class Message {
	private String title ;
	private String content ;
	public void setContent(String content) {
		this.content = content;
	}
	public void setTitle(String title) {
		this.title = title;
	}
	public String getContent() {
		return content;
	}
	public String getTitle() {
		return title;
	}
} 


2、
package cn.mldn.demo;
class Message {
	private String title ;
	private String content ;
	public synchronized void set(String title,String content) {
		this.title = title ;
		try {
			Thread.sleep(100);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		this.content = content ;
	}
	public synchronized String get() {
		try {
			Thread.sleep(10);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		return this.title + "  -  " + this.content ;
	}
} 
public class ThreadDemo { 
	public static void main(String[] args) throws Exception {
		Message msg = new Message() ;
		new Thread(new Producer(msg)).start(); 	// 启动生产者线程
		new Thread(new Consumer(msg)).start(); 	// 启动消费者线程
	}
}
class Producer implements Runnable {
	private Message msg ; 
	public Producer(Message msg) {
		this.msg = msg ;
	}
	@Override
	public void run() {
		for (int x = 0 ; x < 100 ; x ++) {
			if (x % 2 == 0) {
				this.msg.set("王健","宇宙大帅哥");
			} else {
				this.msg.set("小高","猥琐第一人，常态保持。");
			}
		}
	}
}
class Consumer implements Runnable {
	private Message msg ;
	public Consumer(Message msg) {
		this.msg = msg ;
	}
	@Override
	public void run() {
		for (int x = 0 ; x < 100 ; x ++) {
			System.out.println(this.msg.get());
		}
	}
	
}



3、

package cn.mldn.demo;
class Message {
	private String title ;
	private String content ;
	private boolean flag = true ; // 表示生产或消费的形式
	// flag = true：允许生产，但是不允许消费
	// flag = false：允许消费，不允许生产
	public synchronized void set(String title,String content) {
		if (this.flag == false) {	// 无法进行生产，应该等待被消费
			try {
				super.wait();
			} catch (InterruptedException e) {
				e.printStackTrace();
			} 
		}
		this.title = title ;
		try {
			Thread.sleep(100);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		this.content = content ;
		this.flag = false ; // 已经生产过了
		super.notify(); // 唤醒等待的线程
	}
	public synchronized String get() {
		if (this.flag == true) {	// 还未生产，需要等待
			try {
				super.wait();
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
		try {
			Thread.sleep(10);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		try {
			return this.title + "  -  " + this.content ;
		} finally {	// 不管如何都要执行
			this.flag = true ; // 继续生产
			super.notify(); // 唤醒等待线程
		}
	}
} 
public class ThreadDemo { 
	public static void main(String[] args) throws Exception {
		Message msg = new Message() ;
		new Thread(new Producer(msg)).start(); 	// 启动生产者线程
		new Thread(new Consumer(msg)).start(); 	// 启动消费者线程
	}
}
class Producer implements Runnable {
	private Message msg ; 
	public Producer(Message msg) {
		this.msg = msg ;
	}
	@Override
	public void run() {
		for (int x = 0 ; x < 100 ; x ++) {
			if (x % 2 == 0) {
				this.msg.set("王健","宇宙大帅哥");
			} else {
				this.msg.set("小高","猥琐第一人，常态保持。");
			}
		}
	}
}
class Consumer implements Runnable {
	private Message msg ;
	public Consumer(Message msg) {
		this.msg = msg ;
	}
	@Override
	public void run() {
		for (int x = 0 ; x < 100 ; x ++) {
			System.out.println(this.msg.get());
		}
	}
	
}

