1、

package cn.mldn.demo;
public class JavaAPIDemo {
	public static void main(String[] args) throws Exception {
		Emp emp = new Emp() ;	// 更多情况下开发者关注的是内容的设置
		emp.setEname("SMITH");
		emp.setJob("CLERK");
		// 使用为对象设置之后
		System.out.println("姓名：" + emp.getEname() + "、职位：" + emp.getJob());
	} 
}
class Emp {
	private String ename ;
	private String job ;
	public void setEname(String ename) {
		this.ename = ename;
	}
	public void setJob(String job) {
		this.job = job;
	}
	public String getEname() {
		return ename;
	}
	public String getJob() {
		return job;
	}
}


2、

package cn.mldn.demo;
public class JavaAPIDemo {
	public static void main(String[] args) throws Exception {
		String value = "ename:Smith|job:Clerk" ;
		Emp emp = ClassInstanceFactory.create(Emp.class, value) ;
		System.out.println("姓名：" + emp.getEname() + "、职位：" + emp.getJob());
	} 
}
class ClassInstanceFactory {
	private ClassInstanceFactory() {}
	/**
	 * 实例化对象的创建方法，该对象可以根据传入的字符串结构“属性:内容|属性:内容”
	 * @param clazz 要进行反射实例化的Class类对象，有Class就可以反射实例化对象
	 * @param value 要设置给对象的属性内容
	 * @return 一个已经配置好属性内容的Java类对象
	 */
	public static <T> T create(Class<?> clazz,String value) {
		return null ;
	}
}
class Emp {
	private String ename ;
	private String job ;
	public void setEname(String ename) {
		this.ename = ename;
	}
	public void setJob(String job) {
		this.job = job;
	}
	public String getEname() {
		return ename;
	}
	public String getJob() {
		return job;
	}
}


3、
package cn.mldn.demo;

import java.lang.reflect.Field;
import java.lang.reflect.Method;

public class JavaAPIDemo {
	public static void main(String[] args) throws Exception {
		String value = "enames:Smith|job:Clerk" ;
		Emp emp = ClassInstanceFactory.create(Emp.class, value) ;
		System.out.println("姓名：" + emp.getEname() + "、职位：" + emp.getJob());
	} 
}
class ClassInstanceFactory {
	private ClassInstanceFactory() {}
	/**
	 * 实例化对象的创建方法，该对象可以根据传入的字符串结构“属性:内容|属性:内容”
	 * @param clazz 要进行反射实例化的Class类对象，有Class就可以反射实例化对象
	 * @param value 要设置给对象的属性内容
	 * @return 一个已经配置好属性内容的Java类对象
	 */
	public static <T> T create(Class<?> clazz,String value) {
		try {	// 如果要想采用反射进行简单Java类对象属性设置的时候，类中必须要有无参构造
			Object obj = clazz.getDeclaredConstructor().newInstance() ;
			BeanUtils.setValue(obj, value); // 通过反射设置属性
			return (T) obj ; // 返回对象
		} catch (Exception e) {
			e.printStackTrace(); // 如果此时真的出现了错误，本质上抛出异常也没用
			return null ;
		}
	}
}
class StringUtils {
	public static String initcap(String str) {
		if (str == null || "".equals(str)) {
			return str ;
		}
		if (str.length() == 1) {
			return str.toUpperCase() ;
		} else {
			return str.substring(0,1).toUpperCase() + str.substring(1) ;
		}
	}
} 
class BeanUtils {	// 进行Bean处理的类
	private BeanUtils() {} 
	/**
	 * 实现指定对象的属性设置
	 * @param obj 要进行反射操作的实例化对象
	 * @param value 包含有指定内容的字符串，格式“属性:内容|属性:内容”
	 */
	public static void setValue(Object obj,String value) {
		String results [] = value.split("\\|") ; // 按照“|”进行每一组属性的拆分
		for (int x = 0 ; x < results.length ; x ++) {	// 循环设置属性内容
			// attval[0]保存的是属性名称、attval[1]保存的是属性内容
			String attval [] = results[x].split(":") ; // 获取“属性名称”与内容；
			try {
				Field field = obj.getClass().getDeclaredField(attval[0]) ; // 获取成员
				Method setMethod = obj.getClass().getDeclaredMethod("set" + StringUtils.initcap(attval[0]), field.getType()) ;
				setMethod.invoke(obj, attval[1]) ; // 调用setter方法设置内容
			} catch (Exception e) {}
		}
	}
}
class Emp {
	private String ename ;
	private String job ;
	public void setEname(String ename) {
		this.ename = ename;
	}
	public void setJob(String job) {
		this.job = job;
	}
	public String getEname() {
		return ename;
	}
	public String getJob() {
		return job;
	}
}


4、
package cn.mldn.demo;

import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

public class JavaAPIDemo {
	public static void main(String[] args) throws Exception {
		String value = "empno:7369|ename:Smith|job:Clerk|salary:750.00|hiredate:1989-10-10" ;
		Emp emp = ClassInstanceFactory.create(Emp.class, value) ; 
		System.out.println("雇员编号：" + emp.getEmpno() + "姓名：" + emp.getEname() + "、职位：" + emp.getJob() + "、基本工资："
				+ emp.getSalary() + "、雇佣日期：" + emp.getHiredate());
	} 
}
class ClassInstanceFactory {
	private ClassInstanceFactory() {}
	/**
	 * 实例化对象的创建方法，该对象可以根据传入的字符串结构“属性:内容|属性:内容”
	 * @param clazz 要进行反射实例化的Class类对象，有Class就可以反射实例化对象
	 * @param value 要设置给对象的属性内容
	 * @return 一个已经配置好属性内容的Java类对象
	 */
	public static <T> T create(Class<?> clazz,String value) {
		try {	// 如果要想采用反射进行简单Java类对象属性设置的时候，类中必须要有无参构造
			Object obj = clazz.getDeclaredConstructor().newInstance() ;
			BeanUtils.setValue(obj, value); // 通过反射设置属性
			return (T) obj ; // 返回对象
		} catch (Exception e) {
			e.printStackTrace(); // 如果此时真的出现了错误，本质上抛出异常也没用
			return null ;
		}
	}
}
class StringUtils {
	public static String initcap(String str) {
		if (str == null || "".equals(str)) {
			return str ;
		}
		if (str.length() == 1) {
			return str.toUpperCase() ;
		} else {
			return str.substring(0,1).toUpperCase() + str.substring(1) ;
		}
	}
} 
class BeanUtils {	// 进行Bean处理的类
	private BeanUtils() {} 
	/**
	 * 实现指定对象的属性设置
	 * @param obj 要进行反射操作的实例化对象
	 * @param value 包含有指定内容的字符串，格式“属性:内容|属性:内容”
	 */
	public static void setValue(Object obj,String value) {
		String results [] = value.split("\\|") ; // 按照“|”进行每一组属性的拆分
		for (int x = 0 ; x < results.length ; x ++) {	// 循环设置属性内容
			// attval[0]保存的是属性名称、attval[1]保存的是属性内容
			String attval [] = results[x].split(":") ; // 获取“属性名称”与内容；
			try {
				Field field = obj.getClass().getDeclaredField(attval[0]) ; // 获取成员
				Method setMethod = obj.getClass().getDeclaredMethod("set" + StringUtils.initcap(attval[0]), field.getType()) ;
				Object convertValue = BeanUtils.convertAttributeValue(field.getType().getName(), attval[1]) ;
				setMethod.invoke(obj, convertValue) ; // 调用setter方法设置内容
			} catch (Exception e) {}
		}
	}
	/**
	 * 实现属性类型转换处理
	 * @param type 属性类型，通过Field获取的
	 * @param value 属性的内容，传入的都是字符串，需要将其变为指定类型
	 * @return 转换后的数据
	 */
	private static Object convertAttributeValue(String type,String value) {
		if ("long".equals(type) || "java.lang.Long".equals(type)) {	// 长整型
			return Long.parseLong(value) ;
		} else if ("int".equals(type) || "java.lang.int".equals(type)) {
			return Integer.parseInt(value) ;
		} else if ("double".equals(type) || "java.lang.double".equals(type)) {
			return Double.parseDouble(value) ;
		} else if ("java.util.Date".equals(type)) {
			SimpleDateFormat sdf = null ;
			if (value.matches("\\d{4}-\\d{2}-\\d{2}")) {	// 日期类型
				sdf = new SimpleDateFormat("yyyy-MM-dd") ;
			} else if (value.matches("\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}")) {
				sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss") ;
			} else {
				return new Date() ; // 当前日期
			}
			try {
				return sdf.parse(value) ;
			} catch (ParseException e) {
				return new Date() ; // 当前日期
			}
		} else {
			return value ;
		}
	}
}
class Emp {
	private long empno ;
	private String ename ;
	private String job ;
	private double salary ;
	private Date hiredate ;
	public void setEname(String ename) {
		this.ename = ename;
	}
	public void setJob(String job) {
		this.job = job;
	}
	public String getEname() {
		return ename;
	}
	public String getJob() {
		return job;
	}
	public long getEmpno() {
		return empno;
	}
	public void setEmpno(long empno) {
		this.empno = empno;
	}
	public double getSalary() {
		return salary;
	}
	public void setSalary(double salary) {
		this.salary = salary;
	}
	public Date getHiredate() {
		return hiredate;
	}
	public void setHiredate(Date hiredate) {
		this.hiredate = hiredate;
	}
}


5、
package cn.mldn.demo;

import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Date;

public class JavaAPIDemo {
	public static void main(String[] args) throws Exception {
	String value = "empno:7369|ename:Smith|job:Clerk|salary:750.00|hiredate:1989-10-10|" + 
			"dept.dname:财务部|dept.company.name:MLDN" ;
		Emp emp = ClassInstanceFactory.create(Emp.class, value) ; 
		System.out.println("雇员编号：" + emp.getEmpno() + "姓名：" + emp.getEname() + "、职位：" + emp.getJob() + "、基本工资："
				+ emp.getSalary() + "、雇佣日期：" + emp.getHiredate());
		System.out.println(emp.getDept());
		System.out.println(emp.getDept().getCompany());
	} 
}
class ClassInstanceFactory {
	private ClassInstanceFactory() {}
	/**
	 * 实例化对象的创建方法，该对象可以根据传入的字符串结构“属性:内容|属性:内容”
	 * @param clazz 要进行反射实例化的Class类对象，有Class就可以反射实例化对象
	 * @param value 要设置给对象的属性内容
	 * @return 一个已经配置好属性内容的Java类对象
	 */
	public static <T> T create(Class<?> clazz,String value) {
		try {	// 如果要想采用反射进行简单Java类对象属性设置的时候，类中必须要有无参构造
			Object obj = clazz.getDeclaredConstructor().newInstance() ;
			BeanUtils.setValue(obj, value); // 通过反射设置属性
			return (T) obj ; // 返回对象
		} catch (Exception e) {
			e.printStackTrace(); // 如果此时真的出现了错误，本质上抛出异常也没用
			return null ;
		}
	}
}
class StringUtils {
	public static String initcap(String str) {
		if (str == null || "".equals(str)) {
			return str ;
		}
		if (str.length() == 1) {
			return str.toUpperCase() ;
		} else {
			return str.substring(0,1).toUpperCase() + str.substring(1) ;
		}
	}
} 
class BeanUtils {	// 进行Bean处理的类
	private BeanUtils() {} 
	/**
	 * 实现指定对象的属性设置
	 * @param obj 要进行反射操作的实例化对象
	 * @param value 包含有指定内容的字符串，格式“属性:内容|属性:内容”
	 */
	public static void setValue(Object obj,String value) {
		String results [] = value.split("\\|") ; // 按照“|”进行每一组属性的拆分
		for (int x = 0 ; x < results.length ; x ++) {	// 循环设置属性内容
			// attval[0]保存的是属性名称、attval[1]保存的是属性内容
			String attval [] = results[x].split(":") ; // 获取“属性名称”与内容；
			try {
				if (attval[0].contains(".")) {	// 多级配置
					String temp [] = attval[0].split("\\.") ;
					Object currentObject = obj ;
					// 最后一位肯定是指定类中的属性名称，所以不在本次实例化处理的范畴之内
					for (int y = 0 ; y < temp.length - 1 ; y ++) {	// 实例化
						// 调用相应的getter方法，如果getter方法返回了null表示该对象未实例化
						Method getMethod = currentObject.getClass().getDeclaredMethod("get" + StringUtils.initcap(temp[y])) ;
						Object tempObject = getMethod.invoke(currentObject) ;
						if (tempObject == null) {	// 该对象现在并没有实例化
							Field field = currentObject.getClass().getDeclaredField(temp[y]) ;	// 获取属性类型
							Method method = currentObject.getClass().getDeclaredMethod("set" + StringUtils.initcap(temp[y]), field.getType()) ;
							Object newObject = field.getType().getDeclaredConstructor().newInstance() ;
							method.invoke(currentObject, newObject) ;
							currentObject = newObject ;
						} else {
							currentObject = tempObject ;
						}
					}
				} else {
					Field field = obj.getClass().getDeclaredField(attval[0]) ; // 获取成员
					Method setMethod = obj.getClass().getDeclaredMethod("set" + StringUtils.initcap(attval[0]), field.getType()) ;
					Object convertValue = BeanUtils.convertAttributeValue(field.getType().getName(), attval[1]) ;
					setMethod.invoke(obj, convertValue) ; // 调用setter方法设置内容
				}
			} catch (Exception e) {
			}
		}
	}
	/**
	 * 实现属性类型转换处理
	 * @param type 属性类型，通过Field获取的
	 * @param value 属性的内容，传入的都是字符串，需要将其变为指定类型
	 * @return 转换后的数据
	 */
	private static Object convertAttributeValue(String type,String value) {
		if ("long".equals(type) || "java.lang.Long".equals(type)) {	// 长整型
			return Long.parseLong(value) ;
		} else if ("int".equals(type) || "java.lang.int".equals(type)) {
			return Integer.parseInt(value) ;
		} else if ("double".equals(type) || "java.lang.double".equals(type)) {
			return Double.parseDouble(value) ;
		} else if ("java.util.Date".equals(type)) {
			SimpleDateFormat sdf = null ;
			if (value.matches("\\d{4}-\\d{2}-\\d{2}")) {	// 日期类型
				sdf = new SimpleDateFormat("yyyy-MM-dd") ;
			} else if (value.matches("\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}")) {
				sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss") ;
			} else {
				return new Date() ; // 当前日期
			}
			try {
				return sdf.parse(value) ;
			} catch (ParseException e) {
				return new Date() ; // 当前日期
			}
		} else {
			return value ;
		}
	}
}
class Company {
	private String name ;
	private Date createdate ;
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public Date getCreatedate() {
		return createdate;
	}
	public void setCreatedate(Date createdate) {
		this.createdate = createdate;
	}
}
class Dept {
	private String dname ;
	private String loc ;
	private Company company ;
	public String getDname() {
		return dname;
	}
	public void setDname(String dname) {
		this.dname = dname;
	}
	public String getLoc() {
		return loc;
	}
	public void setLoc(String loc) {
		this.loc = loc;
	}
	public Company getCompany() {
		return company;
	}
	public void setCompany(Company company) {
		this.company = company;
	}
	
}
class Emp {
	private long empno ;
	private String ename ;
	private String job ;
	private double salary ;
	private Date hiredate ;
	private Dept dept ; 
	
	public Dept getDept() {
		return dept;
	}
	public void setDept(Dept dept) {
		this.dept = dept;
	}
	public void setEname(String ename) {
		this.ename = ename;
	}
	public void setJob(String job) {
		this.job = job;
	}
	public String getEname() {
		return ename;
	}
	public String getJob() {
		return job;
	}
	public long getEmpno() {
		return empno;
	}
	public void setEmpno(long empno) {
		this.empno = empno;
	}
	public double getSalary() {
		return salary;
	}
	public void setSalary(double salary) {
		this.salary = salary;
	}
	public Date getHiredate() {
		return hiredate;
	}
	public void setHiredate(Date hiredate) {
		this.hiredate = hiredate;
	}
}


6、
package cn.mldn.demo;

import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

public class JavaAPIDemo {
	public static void main(String[] args) throws Exception {
	String value = "empno:7369|ename:Smith|job:Clerk|salary:750.00|hiredate:1989-10-10|" + 
			"dept.dname:财务部|dept.company.name:MLDN" ;
		Emp emp = ClassInstanceFactory.create(Emp.class, value) ; 
		System.out.println("雇员编号：" + emp.getEmpno() + "姓名：" + emp.getEname() + "、职位：" + emp.getJob() + "、基本工资："
				+ emp.getSalary() + "、雇佣日期：" + emp.getHiredate());
		System.out.println(emp.getDept().getDname());
		System.out.println(emp.getDept().getCompany().getName());
	} 
}
class ClassInstanceFactory {
	private ClassInstanceFactory() {}
	/**
	 * 实例化对象的创建方法，该对象可以根据传入的字符串结构“属性:内容|属性:内容”
	 * @param clazz 要进行反射实例化的Class类对象，有Class就可以反射实例化对象
	 * @param value 要设置给对象的属性内容
	 * @return 一个已经配置好属性内容的Java类对象
	 */
	public static <T> T create(Class<?> clazz,String value) {
		try {	// 如果要想采用反射进行简单Java类对象属性设置的时候，类中必须要有无参构造
			Object obj = clazz.getDeclaredConstructor().newInstance() ;
			BeanUtils.setValue(obj, value); // 通过反射设置属性
			return (T) obj ; // 返回对象
		} catch (Exception e) {
			e.printStackTrace(); // 如果此时真的出现了错误，本质上抛出异常也没用
			return null ;
		}
	}
}
class StringUtils {
	public static String initcap(String str) {
		if (str == null || "".equals(str)) {
			return str ;
		}
		if (str.length() == 1) {
			return str.toUpperCase() ;
		} else {
			return str.substring(0,1).toUpperCase() + str.substring(1) ;
		}
	}
} 
class BeanUtils {	// 进行Bean处理的类
	private BeanUtils() {} 
	/**
	 * 实现指定对象的属性设置
	 * @param obj 要进行反射操作的实例化对象
	 * @param value 包含有指定内容的字符串，格式“属性:内容|属性:内容”
	 */
	public static void setValue(Object obj,String value) {
		String results [] = value.split("\\|") ; // 按照“|”进行每一组属性的拆分
		for (int x = 0 ; x < results.length ; x ++) {	// 循环设置属性内容
			// attval[0]保存的是属性名称、attval[1]保存的是属性内容
			String attval [] = results[x].split(":") ; // 获取“属性名称”与内容；
			try {
				if (attval[0].contains(".")) {	// 多级配置
					String temp [] = attval[0].split("\\.") ;
					Object currentObject = obj ;
					// 最后一位肯定是指定类中的属性名称，所以不在本次实例化处理的范畴之内
					for (int y = 0 ; y < temp.length - 1 ; y ++) {	// 实例化
						// 调用相应的getter方法，如果getter方法返回了null表示该对象未实例化
						Method getMethod = currentObject.getClass().getDeclaredMethod("get" + StringUtils.initcap(temp[y])) ;
						Object tempObject = getMethod.invoke(currentObject) ;
						if (tempObject == null) {	// 该对象现在并没有实例化
							Field field = currentObject.getClass().getDeclaredField(temp[y]) ;	// 获取属性类型
							Method method = currentObject.getClass().getDeclaredMethod("set" + StringUtils.initcap(temp[y]), field.getType()) ;
							Object newObject = field.getType().getDeclaredConstructor().newInstance() ;
							method.invoke(currentObject, newObject) ;
							currentObject = newObject ;
						} else {
							currentObject = tempObject ;
						}
					}
					// 进行属性内容的设置
					Field field = currentObject.getClass().getDeclaredField(temp[temp.length - 1]) ; // 获取成员
					Method setMethod = currentObject.getClass().getDeclaredMethod("set" + StringUtils.initcap(temp[temp.length - 1]), field.getType()) ;
					Object convertValue = BeanUtils.convertAttributeValue(field.getType().getName(), attval[1]) ;
					setMethod.invoke(currentObject, convertValue) ; // 调用setter方法设置内容
				} else {
					Field field = obj.getClass().getDeclaredField(attval[0]) ; // 获取成员
					Method setMethod = obj.getClass().getDeclaredMethod("set" + StringUtils.initcap(attval[0]), field.getType()) ;
					Object convertValue = BeanUtils.convertAttributeValue(field.getType().getName(), attval[1]) ;
					setMethod.invoke(obj, convertValue) ; // 调用setter方法设置内容
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}
	/**
	 * 实现属性类型转换处理
	 * @param type 属性类型，通过Field获取的
	 * @param value 属性的内容，传入的都是字符串，需要将其变为指定类型
	 * @return 转换后的数据
	 */
	private static Object convertAttributeValue(String type,String value) {
		if ("long".equals(type) || "java.lang.Long".equals(type)) {	// 长整型
			return Long.parseLong(value) ;
		} else if ("int".equals(type) || "java.lang.int".equals(type)) {
			return Integer.parseInt(value) ;
		} else if ("double".equals(type) || "java.lang.double".equals(type)) {
			return Double.parseDouble(value) ;
		} else if ("java.util.Date".equals(type)) {
			SimpleDateFormat sdf = null ;
			if (value.matches("\\d{4}-\\d{2}-\\d{2}")) {	// 日期类型
				sdf = new SimpleDateFormat("yyyy-MM-dd") ;
			} else if (value.matches("\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}")) {
				sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss") ;
			} else {
				return new Date() ; // 当前日期
			}
			try {
				return sdf.parse(value) ;
			} catch (ParseException e) {
				return new Date() ; // 当前日期
			}
		} else {
			return value ;
		}
	}
}
class Company {
	private String name ;
	private Date createdate ;
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public Date getCreatedate() {
		return createdate;
	}
	public void setCreatedate(Date createdate) {
		this.createdate = createdate;
	}
}
class Dept {
	private String dname ;
	private String loc ;
	private Company company ;
	public String getDname() {
		return dname;
	}
	public void setDname(String dname) {
		this.dname = dname;
	}
	public String getLoc() {
		return loc;
	}
	public void setLoc(String loc) {
		this.loc = loc;
	}
	public Company getCompany() {
		return company;
	}
	public void setCompany(Company company) {
		this.company = company;
	}
	
}
class Emp {
	private long empno ;
	private String ename ;
	private String job ;
	private double salary ;
	private Date hiredate ;
	private Dept dept ; 
	
	public Dept getDept() {
		return dept;
	}
	public void setDept(Dept dept) {
		this.dept = dept;
	}
	public void setEname(String ename) {
		this.ename = ename;
	}
	public void setJob(String job) {
		this.job = job;
	}
	public String getEname() {
		return ename;
	}
	public String getJob() {
		return job;
	}
	public long getEmpno() {
		return empno;
	}
	public void setEmpno(long empno) {
		this.empno = empno;
	}
	public double getSalary() {
		return salary;
	}
	public void setSalary(double salary) {
		this.salary = salary;
	}
	public Date getHiredate() {
		return hiredate;
	}
	public void setHiredate(Date hiredate) {
		this.hiredate = hiredate;
	}
}





